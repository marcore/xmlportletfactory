#parse("/Resources/VelocityTemplates_common/PortletFiles/variables.txt")
#set( $createPath = "/docroot/WEB-INF/src/${pathBase}/${commonData.getClient().toLowerCase()}/${commonData.getProjectName().toLowerCase()}/service/impl" )
#set( $createName = "/${classDef_name}LocalServiceImpl.java" )
#parse("/Resources/VelocityTemplates_common/PortletFiles/macro_GetSetFieldName.vm")
#include("/Resources/VelocityTemplates_common/PortletFiles/license_java.txt")
package ${packageBase}.${commonData.getClient().toLowerCase()}.${commonData.getProjectName().toLowerCase()}.service.impl;

import java.util.List;

import ${packageBase}.${commonData.getClient().toLowerCase()}.${commonData.getProjectName().toLowerCase()}.model.${classDef_name};
import ${packageBase}.${commonData.getClient().toLowerCase()}.${commonData.getProjectName().toLowerCase()}.service.base.${classDef_name}LocalServiceBaseImpl;
import ${packageBase}.${commonData.getClient().toLowerCase()}.${commonData.getProjectName().toLowerCase()}.service.persistence.${classDef_name}Util;
#if ($generateActivity)
import ${packageBase}.${commonData.getClient().toLowerCase()}.${commonData.getProjectName().toLowerCase()}.social.${classDef_name}ActivityKeys;
#end
import com.liferay.counter.service.CounterLocalServiceUtil;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.service.ServiceContext;
#if ($generateActivity)
import com.liferay.portal.kernel.util.StringPool;
#end
import com.liferay.portal.kernel.dao.orm.QueryUtil;
#if ($hasWorkflow)
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import com.liferay.portal.kernel.workflow.WorkflowHandlerRegistryUtil;
import com.liferay.portal.model.User;
import java.util.Date;
#end

#set ($fields = $application.getFileDef().getFields().getFieldArray())
#set ($hasImages="false")
#set ($hasDocuments="false")
#set ($hasDetails = "false")
#foreach($field in $fields)
#if(${field.getType().getDomNode().getChildNodes().item(1).getLocalName()}=="image")
#set ($hasImages="true")
#end
#if(${field.getType().getDomNode().getChildNodes().item(1).getLocalName()}=="document")
#set ($hasDocuments="true")
#end
#end
#if($hasDocuments == "true")
import com.liferay.portlet.documentlibrary.service.DLFolderLocalServiceUtil;
#end
#if($hasImages == "true")
import com.liferay.portlet.imagegallery.service.IGFolderLocalServiceUtil;
#end
import com.liferay.portal.kernel.exception.PortalException;

#foreach($detailfile in $application.getDetailFiles().getDetailFileArray())
// needed for ${application.getClassDef().getName()} detail-file ${detailfile.getDetailFileClassName()}
#foreach($detailapplication in $applications)
#if (${detailapplication.getClassDef().getName()} == ${detailfile.getDetailFileClassName()})
#set($hasDetails = "true")
import ${packageBase}.${commonData.getClient().toLowerCase()}.${commonData.getProjectName().toLowerCase()}.service.${detailapplication.getClassDef().getName()}LocalServiceUtil;
import ${packageBase}.${commonData.getClient().toLowerCase()}.${commonData.getProjectName().toLowerCase()}.model.${detailapplication.getClassDef().getName()};
#end
#end
#end

/**
 * @author ${author}
 */
public class ${classDef_name}LocalServiceImpl extends ${classDef_name}LocalServiceBaseImpl {

@SuppressWarnings("unchecked")
	public List findAllInUser(long userId)throws SystemException {
#if ($hasWorkflow)
		List<${classDef_name}> list = (List<${classDef_name}>) ${classInstance}Persistence.findByU_S(userId, WorkflowConstants.STATUS_APPROVED);
#else
		List<${classDef_name}> list = (List<${classDef_name}>) ${classInstance}Persistence.findByUserId(userId);
#end
		return list;
	}

	@SuppressWarnings("unchecked")
	public int countAllInUser(long userId)throws SystemException {
#if ($hasWorkflow)
		int count = ${classInstance}Persistence.countByU_S(userId, WorkflowConstants.STATUS_APPROVED);
#else
		int count = ${classInstance}Persistence.countByUserId(userId);
#end
		return count;
	}

	@SuppressWarnings("unchecked")
	public List findAllInUser(long userId, OrderByComparator orderByComparator) throws SystemException {

		List<${classDef_name}> list = (List<${classDef_name}>) findAllInUser(userId, QueryUtil.ALL_POS,QueryUtil.ALL_POS, orderByComparator);
		return list;
	}

	@SuppressWarnings("unchecked")
	public List findAllInUser(long userId, int start, int end, OrderByComparator orderByComparator) throws SystemException {
#if ($hasWorkflow)
		List<${classDef_name}> list = (List<${classDef_name}>) ${classInstance}Persistence.findByU_S(userId, WorkflowConstants.STATUS_APPROVED, start, end, orderByComparator);
#else
		List<${classDef_name}> list = (List<${classDef_name}>) ${classInstance}Persistence.findByUserId(userId, start, end, orderByComparator);
#end
		return list;
	}

	@SuppressWarnings("unchecked")
	public List findAllInGroup(long groupId) throws SystemException {
#if ($hasWorkflow)
		List<${classDef_name}> list = (List<${classDef_name}>) ${classInstance}Persistence.filterFindByG_S(groupId, WorkflowConstants.STATUS_APPROVED);
#else
		List<${classDef_name}> list = (List<${classDef_name}>) ${classInstance}Persistence.filterFindByGroupId(groupId);
#end
		return list;
	}

	@SuppressWarnings("unchecked")
	public int countAllInGroup(long groupId) throws SystemException {
		#if ($hasWorkflow)
			int count = ${classInstance}Persistence.filterCountByG_S(groupId, WorkflowConstants.STATUS_APPROVED);
		#else
			int count = ${classInstance}Persistence.filterCountByGroupId(groupId);
		#end
		return count;
	}
	
	@SuppressWarnings("unchecked")
	public List findAllInGroup(long groupId, OrderByComparator orderByComparator) throws SystemException{
		List <${classDef_name}> list = (List<${classDef_name}>) findAllInGroup (groupId, QueryUtil.ALL_POS,QueryUtil.ALL_POS, orderByComparator);
		return list;
	}

	@SuppressWarnings("unchecked")
	public List findAllInGroup(long groupId, int start, int end, OrderByComparator orderByComparator) throws SystemException{
#if ($hasWorkflow)
		List <${classDef_name}> list = (List<${classDef_name}>) ${classInstance}Persistence.filterFindByG_S(groupId, WorkflowConstants.STATUS_APPROVED,start, end, orderByComparator);
#else
		List <${classDef_name}> list = (List<${classDef_name}>) ${classInstance}Persistence.filterFindByGroupId(groupId, start, end, orderByComparator);
#end
		return list;
	}

	@SuppressWarnings("unchecked")
	public List findAllInUserAndGroup(long userId, long groupId) throws SystemException {
#if ($hasWorkflow)
		List<${classDef_name}> list = (List<${classDef_name}>) ${classInstance}Persistence.filterFindByG_U_S(groupId, userId, WorkflowConstants.STATUS_APPROVED);
#else
		List<${classDef_name}> list = (List<${classDef_name}>) ${classInstance}Persistence.filterFindByUserIdGroupId(userId, groupId);
#end
		return list;
	}

	@SuppressWarnings("unchecked")
	public int countAllInUserAndGroup(long userId, long groupId) throws SystemException {
#if ($hasWorkflow)
		int count = ${classInstance}Persistence.filterCountByG_U_S(groupId, userId, WorkflowConstants.STATUS_APPROVED);
#else
		int count = ${classInstance}Persistence.filterCountByUserIdGroupId(userId, groupId);
#end
		return count;
	}

	@SuppressWarnings("unchecked")
	public List findAllInUserAndGroup(long userId, long groupId, OrderByComparator orderByComparator) throws SystemException {

		List<${classDef_name}> list = (List<${classDef_name}>) findAllInUserAndGroup(groupId, userId, QueryUtil.ALL_POS, QueryUtil.ALL_POS, orderByComparator);
		return list;
	}

	@SuppressWarnings("unchecked")
	public List findAllInUserAndGroup(long userId, long groupId, int start, int end, OrderByComparator orderByComparator) throws SystemException {
#if ($hasWorkflow)
		List<${classDef_name}> list = (List<${classDef_name}>) ${classInstance}Persistence.filterFindByG_U_S(groupId, userId, WorkflowConstants.STATUS_APPROVED, start, end, orderByComparator);
#else
		List<${classDef_name}> list = (List<${classDef_name}>) ${classInstance}Persistence.filterFindByUserIdGroupId(userId, groupId, start, end, orderByComparator);
#end
		return list;
	}

#set ($allReadyCreated="")
#foreach($applicationIterator in $applications)
#set ($fieldArray = $applicationIterator.getFileDef().getFields().getFieldArray())
#foreach($fieldOfArray in $fieldArray)
#if (${fieldOfArray.isSetValidation()})
#if (${fieldOfArray.getValidation().isSetDepends()})
#if ($fieldOfArray.getValidation().getClassName() == $application.getClassDef().getName())
#if ($allReadyCreated!="$table.getClassDef().getName()")
#set ($allReadyCreated="$table.getClassDef().getName()")
	@SuppressWarnings("unchecked")
	public List findAllInChainValidationsBy$fieldOfArray.getValidation().getDepends().getAgainstFieldName().substring(0,1).toUpperCase()$fieldOfArray.getValidation().getDepends().getAgainstFieldName().substring(1)(long ${fieldOfArray.getValidation().getDepends().getAgainstFieldName()}) throws SystemException {
		List<${classDef_name}> list = (List<${classDef_name}>) ${classInstance}Persistence.findByChainValidationsBy$fieldOfArray.getValidation().getDepends().getAgainstFieldName().substring(0,1).toUpperCase()$fieldOfArray.getValidation().getDepends().getAgainstFieldName().substring(1)(${fieldOfArray.getValidation().getDepends().getAgainstFieldName()});
		return list;
	}
#end
#end
#end
#end
#end
#end
#foreach($field in $fields)
#if($field.getValidation().getFieldName() == ${field.getName()})
	@SuppressWarnings("unchecked")
	public List findAllIn$field.getName().substring(0,1).toUpperCase()$field.getName().substring(1)(long ${field.getName()})
		throws SystemException {

		List<${classDef_name}> list = (List<${classDef_name}>) ${classDef_name}Util.findBy$field.getName().substring(0,1).toUpperCase()$field.getName().substring(1)(${field.getName()});
		return list;
	}
#end
#end

#foreach($tabledetail in $applications)
#foreach($detailfile in $tabledetail.getDetailFiles().getDetailFileArray())
#if ($application.getClassDef().getName() == $detailfile.getDetailFileClassName())
	@SuppressWarnings("unchecked")
	public List findAllIn${detailfile.getConnectionFieldName()}Group(long ${detailfile.getConnectionFieldName()}, long groupId)	throws SystemException {
#set ($detailFinderName = $detailfile.getConnectionFieldName().substring(0,1).toUpperCase() + $detailfile.getConnectionFieldName().substring(1))
		List<${classDef_name}> list = (List<${classDef_name}>) ${classDef_name}Util.findBy${detailFinderName}GroupId(${detailfile.getConnectionFieldName()}, groupId);
		return list;
	}

	@SuppressWarnings("unchecked")
	public List findAllIn${detailfile.getConnectionFieldName()}(long ${detailfile.getConnectionFieldName()})	throws SystemException {
#set ($detailFinderName = $detailfile.getConnectionFieldName().substring(0,1).toUpperCase() + $detailfile.getConnectionFieldName().substring(1))
		List<${classDef_name}> list = (List<${classDef_name}>) ${classDef_name}Util.findBy${detailFinderName}(${detailfile.getConnectionFieldName()});
		return list;
	}

	@SuppressWarnings("unchecked")
	public List findAllIn${detailfile.getConnectionFieldName()}Group(long ${detailfile.getConnectionFieldName()}, long groupId, OrderByComparator orderByComparator) throws SystemException {
		List<${classDef_name}> list = (List<${classDef_name}>) ${classDef_name}Util.findBy${detailFinderName}GroupId(${detailfile.getConnectionFieldName()}, groupId, QueryUtil.ALL_POS,QueryUtil.ALL_POS, orderByComparator);
		return list;
	}
#end
#end
#end

#if ($hasWorkflow)
	public ${classDef_name} add${classDef_name} (${classDef_name} valid${classDef_name}, ServiceContext serviceContext) throws PortalException, SystemException {
	    ${classDef_name} retVal = add${classDef_name} (valid${classDef_name});

#if ($hasWorkflow)

	    WorkflowHandlerRegistryUtil.startWorkflowInstance(
			valid${classDef_name}.getCompanyId(), valid${classDef_name}.getGroupId(), valid${classDef_name}.getUserId(), ${classDef_name}.class.getName(),
			retVal.getPrimaryKey(), retVal, serviceContext);

#end
		return retVal;
	}
#end

#if ($hasWorkflow || $generateActivity)
	public ${classDef_name} update${classDef_name} (${classDef_name} valid${classDef_name}, ServiceContext serviceContext) throws PortalException, SystemException {
//	    ${classDef_name} retVal = ${classDef_name}Persistence.update(valid${classDef_name}, false);
	    ${classDef_name} retVal = ${classDef_name}Util.update(valid${classDef_name}, false);

#if ($hasWorkflow)
	    WorkflowHandlerRegistryUtil.startWorkflowInstance(
			retVal.getCompanyId(), retVal.getGroupId(), retVal.getUserId(),
			${classDef_name}.class.getName(),retVal.getPrimaryKey(), retVal, serviceContext);
#end
#if($generateActivity)	
		
		// Social
		
		socialActivityLocalService.addActivity(
			valid${classDef_name}.getUserId(), valid${classDef_name}.getGroupId(),
			${classDef_name}.class.getName(), valid${classDef_name}.getPrimaryKey(),
			${classDef_name}ActivityKeys.UPDATE_${classDef_name.toUpperCase()}, StringPool.BLANK, 0);
#end

		return retVal;
	}
#end

	public ${classDef_name} add${classDef_name} (${classDef_name} valid${classDef_name}) throws SystemException {
	    ${classDef_name} fileobj = ${classDef_name}Util.create(CounterLocalServiceUtil.increment(${classDef_name}.class.getName()));

	    fileobj.setCompanyId(valid${classDef_name}.getCompanyId());
	    fileobj.setGroupId(valid${classDef_name}.getGroupId());
	    fileobj.setUserId(valid${classDef_name}.getUserId());

#set ($i =0)
#set ($hasImages = "false")
#set ($hasDocuments = "false")
#foreach ( $fname in $fieldNames )
#set ( $i = $i + 1)
#set ($arrayIter = ${i} - 1)
#if(${i} > 1)
#if(${fieldTypes.get(${arrayIter})}!="calculated")
#if(${fieldTypes.get(${arrayIter})}=="enum" || ${fieldTypes.get(${arrayIter})}=="boolean")
	    fileobj.set#GetSetFieldName($i)(valid${classDef_name}.is#GetSetFieldName($i)());
#elseif(${fieldTypes.get(${arrayIter})}=="image")
		fileobj.set#GetSetFieldName($i)(valid${classDef_name}.get#GetSetFieldName($i)());
#set ($hasImages = "true")
#elseif(${fieldTypes.get(${arrayIter})}=="document")
		fileobj.set#GetSetFieldName($i)(valid${classDef_name}.get#GetSetFieldName($i)());
#set ($hasDocuments = "true")
#else
	    fileobj.set#GetSetFieldName($i)(valid${classDef_name}.get#GetSetFieldName($i)());
#end
#end
#end
#end
#if($hasImages==true)
		fileobj.setFolderIGId(valid${classDef_name}.getFolderIGId());
#end
#if($hasDocuments==true)
		fileobj.setFolderDLId(valid${classDef_name}.getFolderDLId());
#end

#if($generateActivity==true)
		// Social
	    
	 	if (fileobj != null && fileobj.get#GetSetFieldName(1)() != 0) {
	 		try {
				socialActivityLocalService.addActivity(
					fileobj.getUserId(), fileobj.getGroupId(),
					${classDef_name}.class.getName(), fileobj.getPrimaryKey(),
					${classDef_name}ActivityKeys.ADD_${classDef_name.toUpperCase()}, StringPool.BLANK, 0);
			} catch (PortalException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	 	}
#end

	    return ${classDef_name}Util.update(fileobj, false);
	}



#if (($hasWorkflow || $generateActivity) || ($hasWorkflow && $generateActivity) || ($hasDetails))
	public void delete${classDef_name} (${classDef_name} fileobj) throws SystemException, PortalException {
#else
	public void delete${classDef_name} (${classDef_name} fileobj) throws SystemException {
#end
#if(${hasImages}=="true")
		//Remove imageFile dir
		Long igFolder = fileobj.getFolderIGId();
		if((igFolder!=null) && (igFolder!=0L)) {
			try {
				IGFolderLocalServiceUtil.deleteFolder(igFolder);
			} catch (PortalException ex) {
				throw new SystemException (ex.getMessage(),ex.getCause());
			}
		}
#end
#if(${hasDocuments}=="true")
		//Remove DocumentFile dir
		Long dlFolder = fileobj.getFolderDLId();
		if(dlFolder!=null && dlFolder!=0L) {
			try{
				DLFolderLocalServiceUtil.deleteDLFolder(dlFolder);
			} catch (PortalException e) {
				throw new SystemException(e.getMessage(),e.getCause());
			}
		}
#end
#if($hasDetails)
#foreach($detailfile in $application.getDetailFiles().getDetailFileArray())
#foreach($detailapplication in $applications)
#if (${detailapplication.getClassDef().getName()} == ${detailfile.getDetailFileClassName()})
    	deleteDetail${detailapplication.getClassDef().getName()}(fileobj);
#end
#end
#end
#end

	    ${classDef_name}Util.remove(fileobj);

#if ($hasWorkflow)
		workflowInstanceLinkLocalService.deleteWorkflowInstanceLinks(
		fileobj.getCompanyId(), fileobj.getGroupId(),
		${classDef_name}.class.getName(), fileobj.getPrimaryKey());
#end

#if($generateActivity==true)
		// Social

		socialActivityLocalService.deleteActivities(
			${classDef_name}.class.getName(), fileobj.getPrimaryKey());
#end

}

#foreach($detailfile in $application.getDetailFiles().getDetailFileArray())
#foreach($detailapplication in $applications)
#if (${detailapplication.getClassDef().getName()} == ${detailfile.getDetailFileClassName()})

	public void deleteDetail${detailapplication.getClassDef().getName()}(${classDef_name} fileobj)  throws PortalException, SystemException {
		long entityId = fileobj.get${detailfile.getConnectionFieldName().substring(0,1).toUpperCase()}${detailfile.getConnectionFieldName().substring(1)}();
		List<${detailapplication.getClassDef().getName()}> listEntities = ${detailapplication.getClassDef().getName()}LocalServiceUtil.findAllIn${detailfile.getConnectionFieldName()}(entityId);
		for(${detailapplication.getClassDef().getName()} entity: listEntities){
			${detailapplication.getClassDef().getName()}LocalServiceUtil.delete${detailapplication.getClassDef().getName()}(entity);
		}
	}
#end
#end
#end


#if ($hasWorkflow)
	public ${classDef_name} updateStatus(long userId, long entryId, int status, ServiceContext serviceContext)	throws PortalException, SystemException {

		// Entry

		User user = userPersistence.findByPrimaryKey(userId);
		Date now = new Date();

		${classDef_name} entry = ${classDef_name}Util.findByPrimaryKey(entryId);

		int oldStatus = entry.getStatus();
		long oldStatusByUserId = entry.getStatusByUserId();

		entry.setStatus(status);
		entry.setStatusByUserId(user.getUserId());
		entry.setStatusByUserName(user.getFullName());
		entry.setStatusDate(serviceContext.getModifiedDate(now));

		${classDef_name}Util.update(entry, false);

		return entry;
	}
#end
}
