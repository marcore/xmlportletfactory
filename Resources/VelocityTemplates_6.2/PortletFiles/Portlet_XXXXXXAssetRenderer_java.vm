#parse("/Resources/VelocityTemplates_common/PortletFiles/variables.txt")
#set( $createPath = "/docroot/WEB-INF/src/${pathBase}/${commonData.getClient().toLowerCase()}/${commonData.getProjectName().toLowerCase()}/asset" )
#set( $createName = "/${classDef_name}AssetRenderer.java" )
#parse("/Resources/VelocityTemplates_common/PortletFiles/macro_GetSetFieldName.vm")
#include("/Resources/VelocityTemplates_common/PortletFiles/license_java.txt")
#if ($asset)
package ${packageBase}.${commonData.getClient().toLowerCase()}.${commonData.getProjectName().toLowerCase()}.asset;


import ${packageBase}.${commonData.getClient().toLowerCase()}.${commonData.getProjectName().toLowerCase()}.model.${classDef_name};
import ${packageBase}.${commonData.getClient().toLowerCase()}.${commonData.getProjectName().toLowerCase()}.service.permission.${classDef_name}EntryPermission;
import ${packageBase}.${commonData.getClient().toLowerCase()}.${commonData.getProjectName().toLowerCase()}.util.${classDef_name}Util;


import com.liferay.portal.kernel.portlet.LiferayPortletRequest;
import com.liferay.portal.kernel.portlet.LiferayPortletResponse;
import com.liferay.portal.kernel.util.HtmlUtil;
import com.liferay.portal.kernel.util.WebKeys;
import com.liferay.portal.model.Portlet;
import com.liferay.portal.security.permission.ActionKeys;
import com.liferay.portal.security.permission.PermissionChecker;
import com.liferay.portal.service.PortletLocalServiceUtil;
import com.liferay.portal.theme.ThemeDisplay;
import com.liferay.portlet.asset.model.AssetRenderer;
import com.liferay.portlet.asset.model.BaseAssetRenderer;

import java.util.Locale;

import javax.portlet.PortletRequest;
import javax.portlet.PortletURL;
import javax.portlet.RenderRequest;
import javax.portlet.RenderResponse;
import javax.portlet.WindowState;

import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;

/**
 * @author ${author}
 * @author Juan Gonzalez P.
 */
public class ${classDef_name}AssetRenderer extends BaseAssetRenderer {


	public ${classDef_name}AssetRenderer(${classDef_name} entry) {
		_entry = entry;
	}

	public String getAssetRendererFactoryClassName() {
		return ${classDef_name}AssetRendererFactory.CLASS_NAME;
	}

	public long getClassPK() {
		return _entry.getPrimaryKey();
	}	

	public long getGroupId() {
		return _entry.getGroupId();
	}

	public String getSummary(Locale locale) {
		return HtmlUtil.stripHtml(_entry.get${assetSummaryField.substring(0,1).toUpperCase()}${assetSummaryField.substring(1)}());
	}

	public String getTitle(Locale locale) {
		return _entry.get${assetTitleField.substring(0,1).toUpperCase()}${assetTitleField.substring(1)}();
	}

	@Override
	public PortletURL getURLEdit(
			LiferayPortletRequest liferayPortletRequest,
			LiferayPortletResponse liferayPortletResponse)
		throws Exception {

		//PortletURL portletURL = liferayPortletResponse.createActionURL();

		PortletURL portletURL = liferayPortletResponse.createLiferayPortletURL(
				getControlPanelPlid(liferayPortletRequest),
				"${classDef_name}_WAR_${commonData.getProjectName()}portlet",
				PortletRequest.RENDER_PHASE);

		portletURL.setParameter("view", "edit${classDef_name}");
		portletURL.setParameter("${fieldNames.get(0)}",  String.valueOf(_entry.getPrimaryKey()));	
                portletURL.setParameter("editType", "edit");	
		portletURL.setParameter("fromAsset","true");

		return portletURL;
	}

	@Override
	public String getUrlTitle() {
		return _entry.getUrlTitle();
	}
	
	public long getUserId() {
		return _entry.getUserId();
	}

	public String getUserName() {
		return _entry.getUserName();
	}

	public String getUuid() {
		return _entry.getUuid();
	}

	@Override
	public boolean hasEditPermission(PermissionChecker permissionChecker) {
		return ${classDef_name}EntryPermission.contains(
			permissionChecker, _entry, ActionKeys.UPDATE);
	}

	@Override
	public boolean hasViewPermission(PermissionChecker permissionChecker) {
		return ${classDef_name}EntryPermission.contains(
			permissionChecker, _entry, ActionKeys.VIEW);
	}

	@Override
	public String getURLViewInContext(
			LiferayPortletRequest liferayPortletRequest,
			LiferayPortletResponse liferayPortletResponse,
			String noSuchEntryRedirect) throws Exception {
		
		long plid = getCurrentPlid(liferayPortletRequest);

		try{
			plid =${classDef_name}Util.getPlid(getGroupId());
		} catch (Exception e){
		}

		PortletURL portletURL = liferayPortletResponse.createLiferayPortletURL(plid, 
						"${classDef_name}_WAR_${commonData.getProjectName()}portlet", 
						PortletRequest.RENDER_PHASE);
		
		
		portletURL.setParameter("view", "edit${classDef_name}");
		portletURL.setParameter("${fieldNames.get(0)}",  String.valueOf(_entry.getPrimaryKey()));	
                portletURL.setParameter("editType", "view");	
		portletURL.setParameter("fromAsset","true");
		portletURL.setParameter("noSuchEntryRedirect",noSuchEntryRedirect);
				
		return portletURL.toString();
	}

	@Override
	public boolean isPrintable() {
		return true;
	}

	public String render(
			RenderRequest renderRequest, RenderResponse renderResponse,
			String template)
		throws Exception {

		if (template.equals(TEMPLATE_FULL_CONTENT)) {

			renderRequest.setAttribute("${classInstance}", _entry);
			
			return "/JSPs/${fileDef_name}/asset_${fileDef_name}_" + template + ".jsp";
		}
		else {
			return null;
		}
	}

	@Override
	protected String getIconPath(ThemeDisplay themeDisplay) {
		Portlet portlet = null; 
		String path="";	
		try{
			portlet = PortletLocalServiceUtil.getPortletById(themeDisplay.getCompanyId(),
				"${classDef_name}_WAR_${commonData.getProjectName()}portlet");
		} catch (Exception e){					
		}
		
			
		if (portlet!=null){
			path =portlet.getContextPath();
		}
		return path + "/icons/icon.png";
	}

	private long getCurrentPlid(LiferayPortletRequest request)
			throws PortalException, SystemException {
		ThemeDisplay themeDisplay = (ThemeDisplay) request
				.getAttribute(WebKeys.THEME_DISPLAY);
		return themeDisplay.getPlid();
	}

	private ${classDef_name} _entry;
}

#else
#*
     As there are no asset services defined, no file will be generated 
*#
#set ($createFile=false)
#end
